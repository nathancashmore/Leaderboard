#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app/app');
var debug = require('debug')('leaderboard:server');
var http = require('http');
var config = require('getconfig');

/**
 * Setup environment variables from config
 */

var port = normalizePort(process.env.PORT || config.PORT);
app.set('port', port);

var exportAsImage = normalizePort(process.env.EXPORT_AS_IMAGE || config.EXPORT_AS_IMAGE)

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);

  config.PORT = port;
  config.EXPORT_AS_IMAGE = exportAsImage;

  console.log("Started with the following config:");
  console.log(config)

  if (exportAsImage) {
    runExportPoller()
  }
}

function runExportPoller() {
    var rest_options = {
        host: 'localhost',
        port: port,
        path: '/export',
        method: 'GET'
    };

    console.log("Run export poller with following config every 2 mins :");
    console.log(rest_options)

    setInterval(function () {
        var request = http.request(rest_options, function(response) {
            response.on('end', function() {
                console.log("Endpoint /export polled");
            });
        });

        request.on('error', function(error) {
            console.log("Error while calling endpoint.", error);
        });

        request.end();
    }, 2 * 60 * 1000);
}
